name: 🏗️ Deploy with Azure Developer CLI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: choice
        options:
          - provision  # Infrastructure only
          - deploy     # Application only (requires existing infrastructure)
          - up         # Both infrastructure and application
          - down       # Destroy everything
      rs_resource_group:
        description: 'Resource group for Terraform state storage'
        required: false
        type: string
      rs_storage_account:
        description: 'Storage account for Terraform state'
        required: false
        type: string
      rs_container_name:
        description: 'Container name for Terraform state'
        required: false
        type: string
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: string
      action:
        description: 'Action to perform'
        required: true
        default: 'up'
        type: string
      rs_resource_group:
        description: 'Resource group for Terraform state storage'
        required: false
        type: string
      rs_storage_account:
        description: 'Storage account for Terraform state'
        required: false
        type: string
      rs_container_name:
        description: 'Container name for Terraform state'
        required: false
        type: string

env:
  # CI/CD mode configuration
  AZD_SKIP_INTERACTIVE: true
  CI: true
  GITHUB_ACTIONS: true

# Minimal permissions - OIDC handled conditionally per job
permissions:
  contents: read    # Required to checkout repository

jobs:
  # ============================================================================
  # SHARED DEPLOYMENT JOB (handles both preview and deployment)
  # ============================================================================
  deploy:
    name: ${{ github.event_name == 'pull_request' && '📋 Preview Changes' || '🚀 Deploy with AZD' }}
    runs-on: ubuntu-latest
    
    # Try to request OIDC permissions, fall back gracefully if denied

    # Environment selection logic
    environment: >-
      ${{
        github.event_name == 'pull_request' && 'dev' ||
        github.event_name == 'workflow_dispatch' && inputs.environment ||
        github.event_name == 'workflow_call' && inputs.environment ||
        'dev'
      }}
    
    env:
      # OIDC Authentication (preferred)
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # Service Principal Authentication (fallback)
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      # Authentication method detection
      USE_OIDC: ${{ secrets.AZURE_CLIENT_SECRET == '' && 'true' || 'false' }}
      # Environment name logic
      AZURE_ENV_NAME: >-
        ${{
          github.event_name == 'pull_request' && 'dev' ||
          github.event_name == 'workflow_dispatch' && inputs.environment ||
          github.event_name == 'workflow_call' && inputs.environment ||
          'dev'
        }}
      # Remote state fallback chain: inputs → repo vars → defaults
      RS_RESOURCE_GROUP: ${{ inputs.rs_resource_group }}
      RS_STORAGE_ACCOUNT: ${{ inputs.rs_storage_account }}
      RS_CONTAINER_NAME: ${{ inputs.rs_container_name }}
      ARM_USE_OIDC: "true"
    
    outputs:
      resource_group: ${{ steps.extract-outputs.outputs.resource_group }}
      frontend_url: ${{ steps.extract-outputs.outputs.frontend_url }}
      backend_url: ${{ steps.extract-outputs.outputs.backend_url }}
      container_registry_endpoint: ${{ steps.extract-outputs.outputs.container_registry_endpoint }}
      
    steps:
      # ========================================================================
      # SHARED SETUP STEPS
      # ========================================================================
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔐 Azure Login (OIDC)
        if: env.USE_OIDC == 'true'
        uses: azure/login@v2
        continue-on-error: true  # Don't fail if OIDC permissions are denied
        id: azure-login-oidc
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: 🔐 Azure Login (Service Principal)
        if: env.USE_OIDC == 'false'
        uses: azure/login@v2
        id: azure-login-sp
        with:
          creds: '{"clientId":"${{ env.AZURE_CLIENT_ID }}","clientSecret":"${{ env.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ env.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ env.AZURE_TENANT_ID }}"}'
          
      - name: ⚙️ Setup Azure Developer CLI
        uses: Azure/setup-azd@v2
        
      - name: 🔧 Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: 🔐 Log in with Azure Developer CLI
        continue-on-error: true  # Don't fail if authentication doesn't work
        id: azd-login
        run: |
          if ($env:USE_OIDC -eq "true" -and "${{ steps.azure-login-oidc.outcome }}" -eq "success") {
            Write-Host "🔐 Attempting azd authentication with OIDC..."
            azd auth login `
              --client-id $env:AZURE_CLIENT_ID `
              --federated-credential-provider github `
              --tenant-id $env:AZURE_TENANT_ID
          }
          elseif ($env:USE_OIDC -eq "false" -and "${{ steps.azure-login-sp.outcome }}" -eq "success") {
            Write-Host "🔐 Attempting azd authentication with Service Principal..."
            azd auth login `
              --client-id $env:AZURE_CLIENT_ID `
              --client-secret $env:AZURE_CLIENT_SECRET `
              --tenant-id $env:AZURE_TENANT_ID
          }
          else {
            Write-Host "⚠️ Skipping azd login due to failed Azure authentication"
            exit 1
          }
        shell: pwsh

      # ========================================================================
      # SHARED CONFIGURATION STEPS
      # ========================================================================
      - name: ⚙️ Setup AZD Environment
        if: (steps.azure-login-oidc.outcome == 'success') || (steps.azure-login-sp.outcome == 'success')
        run: |
          echo "🔧 Setting up azd environment: ${{ env.AZURE_ENV_NAME }}"
          
          # Create or select azd environment
          if ! azd env list --output json | jq -e ".[] | select(.name==\"${{ env.AZURE_ENV_NAME }}\")" > /dev/null; then
            echo "🔧 Creating azd environment: ${{ env.AZURE_ENV_NAME }}"
            azd env new "${{ env.AZURE_ENV_NAME }}" --no-prompt
          fi
          azd env select "${{ env.AZURE_ENV_NAME }}"

          # Set remote state configuration in azd environment
          echo "🔧 Setting remote state configuration..."
          azd env set RS_RESOURCE_GROUP "${{ env.RS_RESOURCE_GROUP }}"
          azd env set RS_STORAGE_ACCOUNT "${{ env.RS_STORAGE_ACCOUNT }}"
          azd env set RS_CONTAINER_NAME "${{ env.RS_CONTAINER_NAME }}"
          
          echo "✅ AZD environment configured"

      - name: ⚙️ Setup Terraform Parameters
        if: (steps.azure-login-oidc.outcome == 'success') || (steps.azure-login-sp.outcome == 'success')
        run: |
          echo "🔧 Setting up Terraform parameters..."
          
          # Determine environment for tfvars
          TFVARS_ENV="${{ env.AZURE_ENV_NAME }}"
          if [ "$TFVARS_ENV" = "dev" ] && [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Using dev tfvars for PR preview"
          fi
          
          # Base parameters from environment tfvars
          BASE_PARAMS=$(cat "infra/terraform/params/main.tfvars.${TFVARS_ENV}.json")
          echo "Base: $(echo "$BASE_PARAMS" | jq -c .)"
          
          # Determine authentication method for Terraform
          if [ "${{ env.USE_OIDC }}" = "true" ]; then
            PRINCIPAL_TYPE="ServicePrincipal"
            AUTH_METHOD="OIDC"
          else
            PRINCIPAL_TYPE="ServicePrincipal"
            AUTH_METHOD="ClientSecret"
          fi
          
          # Add dynamic parameters
          FINAL_PARAMS=$(echo "$BASE_PARAMS" | jq \
            --arg env "${{ env.AZURE_ENV_NAME }}" \
            --arg principal_type "$PRINCIPAL_TYPE" \
            --arg deployed_by "${GITHUB_ACTOR}" \
            --arg auth_method "$AUTH_METHOD" \
            '. + {
              environment_name: $env,
              principal_type: $principal_type,
              deployed_by: $deployed_by,
              auth_method: $auth_method
            }')
          
          echo "$FINAL_PARAMS" > infra/terraform/main.tfvars.json
          echo "✅ Parameters configured for environment: ${{ env.AZURE_ENV_NAME }} (Auth: $AUTH_METHOD)"

      - name: 🔧 Configure Terraform Backend
        if: (steps.azure-login-oidc.outcome == 'success') || (steps.azure-login-sp.outcome == 'success')
        run: |
          echo "🔧 Configuring Terraform backend..."
          echo "Backend: ${{ env.RS_STORAGE_ACCOUNT }}/${{ env.RS_CONTAINER_NAME }}/${{ env.AZURE_ENV_NAME }}.tfstate"
          
          cat > infra/terraform/backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ env.RS_RESOURCE_GROUP }}"
              storage_account_name = "${{ env.RS_STORAGE_ACCOUNT }}"
              container_name       = "${{ env.RS_CONTAINER_NAME }}"
              key                  = "${{ env.AZURE_ENV_NAME }}.tfstate"
              use_azuread_auth     = true
            }
          }
          EOF
          
          echo "✅ Backend configured"
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: ${{ env.USE_OIDC }}
          ARM_CLIENT_SECRET: ${{ env.USE_OIDC == 'false' && env.AZURE_CLIENT_SECRET || '' }}

      # ========================================================================
      # PREVIEW MODE (for PRs)
      # ========================================================================
      - name: 📋 Run Infrastructure Preview
        if: github.event_name == 'pull_request' && ((steps.azure-login-oidc.outcome == 'success') || (steps.azure-login-sp.outcome == 'success'))
        id: preview
        run: |
          echo "🔍 Running infrastructure preview via AZD..."
          
          # Validate azd environment contains required variables
          echo "🔍 Validating azd environment configuration..."
          azd env get-values > /tmp/azd-env-values.env
          
          missing=0
          for var in RS_RESOURCE_GROUP RS_STORAGE_ACCOUNT RS_CONTAINER_NAME; do
            if ! grep -q "^$var=" /tmp/azd-env-values.env; then
              echo "❌ Missing required remote state variable: $var"
              missing=1
            fi
          done
          
          if [ $missing -eq 0 ]; then
            echo "✅ All required remote state variables are present"
          else
            echo "❌ Some required remote state variables are missing"
            exit 1
          fi

          # Capture azd provision preview output
          echo "🔍 Running azd provision preview..."
          if azd provision --no-prompt --preview --environment "${{ env.AZURE_ENV_NAME }}" > "$GITHUB_WORKSPACE/azd-preview.txt" 2>&1; then
            echo "✅ AZD preview completed successfully"
            echo "preview-success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ AZD preview failed or not supported, output captured for review"
            echo "preview-success=false" >> $GITHUB_OUTPUT
          fi
          
          # Ensure we have some output for the PR comment
          if [ ! -s "$GITHUB_WORKSPACE/azd-preview.txt" ]; then
            echo "No preview output available from azd provision --preview" > "$GITHUB_WORKSPACE/azd-preview.txt"
          fi
          
          echo "✅ Preview output ready"
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: ${{ env.USE_OIDC }}
          ARM_CLIENT_SECRET: ${{ env.USE_OIDC == 'false' && env.AZURE_CLIENT_SECRET || '' }}

      - name: 📋 Handle Limited Preview (No Authentication)
        if: github.event_name == 'pull_request' && !((steps.azure-login-oidc.outcome == 'success') || (steps.azure-login-sp.outcome == 'success'))
        run: |
          echo "⚠️ Limited preview mode - authentication not available" > "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "This may be due to:" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "- Running from a forked repository" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "- Missing 'id-token: write' permissions (for OIDC)" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "- Missing AZURE_CLIENT_SECRET (for Service Principal)" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "- Missing Azure service principal configuration" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "🔧 To enable full preview functionality:" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "Option 1 - OIDC Authentication (Preferred):" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "1. Enable 'id-token: write' permissions in repository settings" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "2. Configure federated identity credentials in Azure AD" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "3. Set secrets: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "Option 2 - Service Principal Authentication (Fallback):" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "1. Create Azure service principal with appropriate permissions" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "2. Set secrets: AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "Current configuration:" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "- USE_OIDC: ${{ env.USE_OIDC }}" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          echo "- Has CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET != '' && 'Yes' || 'No' }}" >> "$GITHUB_WORKSPACE/azd-preview.txt"
          
          echo "preview-success=false" >> $GITHUB_OUTPUT
      
      - name: 💬 Comment PR with Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true  # Don't fail if permissions are denied
        with:
          script: |
            const fs = require('fs');
            const escapeHtml = (s) => s
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;');

            let previewContent = '';
            try {
              previewContent = fs.readFileSync('azd-preview.txt', 'utf8');
            } catch (e) {
              previewContent = 'Azure Developer CLI preview output not available.';
            }

            // Truncate very long previews
            const MAX_LEN = 60000;
            if (previewContent.length > MAX_LEN) {
              previewContent = previewContent.slice(0, MAX_LEN) + "\n...\n[truncated]";
            }

            const previewSection = `\n<details>\n<summary><strong>AZD Infrastructure Preview</strong> (click to expand)</summary>\n\n<pre>\n${escapeHtml(previewContent)}\n</pre>\n</details>\n`;

            const previewSuccess = '${{ steps.preview.outputs.preview-success }}' === 'true';
            const statusIcon = previewSuccess ? '✅' : '⚠️';
            const statusText = previewSuccess ? 'Preview completed successfully' : 'Preview completed with warnings (see details below)';

            const output = `## 🏗️ Infrastructure Preview ${statusIcon}
            
            **Environment:** \`dev\` (PR preview)
            **Action:** Infrastructure provision preview via Azure Developer CLI
            **Status:** ${statusText}
            
            ### 📋 Changes Summary
            - 🏗️ Infrastructure changes will be applied via \`azd provision\`
            - 🚀 Application changes will be deployed via \`azd deploy\`
            - 📦 Full deployment available via \`azd up\`
            
            ### 🛠️ Preview Details
            This preview was generated using \`azd provision --preview\` which shows what infrastructure changes would be made without actually creating or modifying resources.
            
            **Note:** This is a preview - no actual resources will be created until merged to main.
            ${previewSection}`;

            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
              console.log('✅ PR comment posted successfully');
            } catch (error) {
              console.log('⚠️ Could not post PR comment (insufficient permissions):', error.message);
              console.log('📋 Preview content would have been:');
              console.log(output);
            }

      - name: 📋 Add Preview to Job Summary
        if: github.event_name == 'pull_request'
        run: |
          echo "## 🏗️ Infrastructure Preview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** dev (PR preview)" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** Infrastructure provision preview via Azure Developer CLI" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.preview.outputs.preview-success }}" = "true" ]; then
            echo "**Status:** ✅ Preview completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ⚠️ Preview completed with warnings" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Changes Summary" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Infrastructure changes will be applied via \`azd provision\`" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Application changes will be deployed via \`azd deploy\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Full deployment available via \`azd up\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This is a preview - no actual resources will be created until merged to main." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ AZD Preview Output" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          if [ -f "azd-preview.txt" ]; then
            head -n 100 azd-preview.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "Azure Developer CLI preview output not available." >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      # ========================================================================
      # DEPLOYMENT MODE (for push/dispatch/call)
      # ========================================================================
      - name: 🚀 Execute AZD Command
        if: github.event_name != 'pull_request' && ((steps.azure-login-oidc.outcome == 'success') || (steps.azure-login-sp.outcome == 'success'))
        run: |
          ACTION="${{ inputs.action || 'up' }}"
          
          echo "🚀 Executing azd action: $ACTION"
          
          case "$ACTION" in
            "preview")
              echo "🔍 Running infrastructure provision preview..."
              azd provision --no-prompt --preview
              ;;
            "provision")
              echo "🏗️ Provisioning infrastructure only..."
              azd provision --no-prompt
              ;;
            "deploy")
              echo "📦 Deploying application only..."
                # Get registry endpoint from repository variable if available
              REGISTRY_ENDPOINT="${AZURE_CONTAINER_REGISTRY_ENDPOINT:-}"
              if [ -n "$REGISTRY_ENDPOINT" ]; then
                azd env set AZURE_CONTAINER_REGISTRY_ENDPOINT "$REGISTRY_ENDPOINT"
              fi
              azd deploy --no-prompt
              ;;
            "up")
              echo "🚀 Provisioning infrastructure and deploying application..."
              azd up --no-prompt
              ;;
            "down")
              echo "💥 Destroying all resources..."
              azd down --force --purge --no-prompt
              ;;
            *)
              echo "❌ Unknown action: $ACTION"
              exit 1
              ;;
          esac
        env:
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: ${{ env.USE_OIDC }}
          ARM_CLIENT_SECRET: ${{ env.USE_OIDC == 'false' && env.AZURE_CLIENT_SECRET || '' }}
          
      - name: 📤 Extract Deployment Outputs
        id: extract-outputs
        if: github.event_name != 'pull_request' && inputs.action != 'down'
        run: |
          echo "🔍 Extracting deployment information..."
          
          # Get azd environment values
          if azd env get-values > /tmp/azd-values.env 2>/dev/null; then
            source /tmp/azd-values.env
            
            # Extract common outputs
            echo "resource_group=${AZURE_RESOURCE_GROUP:-unknown}" >> $GITHUB_OUTPUT
            echo "container_registry_endpoint=${AZURE_CONTAINER_REGISTRY_ENDPOINT:-unknown}" >> $GITHUB_OUTPUT
            
            # Try to get service endpoints
            echo "frontend_url=${FRONTEND_CONTAINER_APP_FQDN:-unknown}" >> $GITHUB_OUTPUT
            echo "backend_url=${BACKEND_CONTAINER_APP_FQDN:-unknown}" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Could not extract azd outputs"
            echo "resource_group=unknown" >> $GITHUB_OUTPUT
            echo "container_registry_endpoint=unknown" >> $GITHUB_OUTPUT
            echo "frontend_url=" >> $GITHUB_OUTPUT
            echo "backend_url=" >> $GITHUB_OUTPUT
          fi
          
      - name: 🔍 Show Deployment Status
        if: github.event_name != 'pull_request' && inputs.action != 'down'
        run: |
          echo "📊 Deployment Status:"
          azd show --output table || echo "⚠️ Could not show deployment status"
          
          echo ""
          echo "🏷️ Extracted Values:"
          echo "Resource Group: ${{ steps.extract-outputs.outputs.resource_group }}"
          echo "Container Registry: ${{ steps.extract-outputs.outputs.container_registry_endpoint }}"
          echo "Frontend URL: ${{ steps.extract-outputs.outputs.frontend_url }}"
          echo "Backend URL: ${{ steps.extract-outputs.outputs.backend_url }}"
          
      # ========================================================================
      # CLEANUP STEPS
      # ========================================================================
      - name: 🚪 Logout
        if: always()
        run: |
          az logout
          
      - name: 📋 Generate Summary
        if: always()
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "## 📋 Infrastructure Preview Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Environment | \`dev\` (preview) |" >> $GITHUB_STEP_SUMMARY
            echo "| Action | Preview |" >> $GITHUB_STEP_SUMMARY
            echo "| Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          else
            ACTION="${{ inputs.action || 'up' }}"
            
            if [ "$ACTION" = "down" ]; then
              echo "## 💥 Resources Destroyed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Environment \`${{ env.AZURE_ENV_NAME }}\` has been destroyed using Azure Developer CLI." >> $GITHUB_STEP_SUMMARY
            else
              echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Environment | \`${{ env.AZURE_ENV_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
              echo "| Action | \`$ACTION\` |" >> $GITHUB_STEP_SUMMARY
              echo "| Resource Group | \`${{ steps.extract-outputs.outputs.resource_group }}\` |" >> $GITHUB_STEP_SUMMARY
              
              if [ -n "${{ steps.extract-outputs.outputs.frontend_url }}" ]; then
                echo "| Frontend URL | [${{ steps.extract-outputs.outputs.frontend_url }}](${{ steps.extract-outputs.outputs.frontend_url }}) |" >> $GITHUB_STEP_SUMMARY
              fi
              
              if [ -n "${{ steps.extract-outputs.outputs.backend_url }}" ]; then
                echo "| Backend URL | [${{ steps.extract-outputs.outputs.backend_url }}](${{ steps.extract-outputs.outputs.backend_url }}) |" >> $GITHUB_STEP_SUMMARY
              fi
              
              if [ -n "${{ steps.extract-outputs.outputs.container_registry_endpoint }}" ] && [ "${{ steps.extract-outputs.outputs.container_registry_endpoint }}" != "unknown" ]; then
                echo "| Container Registry | \`${{ steps.extract-outputs.outputs.container_registry_endpoint }}\` |" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
              echo "- Test your application using the URLs above" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor resources in the [Azure Portal](https://portal.azure.com)" >> $GITHUB_STEP_SUMMARY
              echo "- Check logs with \`azd monitor\`" >> $GITHUB_STEP_SUMMARY
              
              if [ -n "${{ steps.extract-outputs.outputs.container_registry_endpoint }}" ] && [ "${{ steps.extract-outputs.outputs.container_registry_endpoint }}" != "unknown" ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### 🏗️ Environment Configuration" >> $GITHUB_STEP_SUMMARY
                echo "- ✅ **AZURE_CONTAINER_REGISTRY_ENDPOINT** set for environment \`${{ env.AZURE_ENV_NAME }}\`" >> $GITHUB_STEP_SUMMARY
                echo "- This variable is now available for subsequent deployments and workflows" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
